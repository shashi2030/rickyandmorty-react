{"version":3,"sources":["constants/index.js","service/apiService.js","utils/index.js","components/container/Login/index.js","components/container/Register/index.js","components/presentation/AuthRoute/AuthRoute.js","components/presentation/ItemList/ItemList.js","components/presentation/Search/index.js","components/presentation/Sorting/index.js","components/presentation/Logout/index.js","components/presentation/Header/index.js","components/presentation/Checkbox/index.js","components/presentation/Filter/index.js","components/container/Accordion/Accordion.js","components/container/Home/index.js","components/container/App/index.js","serviceWorker.js","index.js","assets/images/logout.svg"],"names":["FILTERED_OPTIONS","species","gender","origin","baseService","get","_url","url","axios","then","response","Promise","resolve","catch","err","reject","post","body","getCheckboxData","data","label","result","map","item","push","name","Set","setLocalstorage","value","localStorage","setItem","initialState","userName","password","submitted","serverError","Login","props","handleChange","e","target","trim","setState","state","registerNewUser","history","handleSubmit","preventDefault","username","console","log","status","userData","loginId","_id","userId","sorting","utils","error","this","Container","component","maxWidth","className","Typography","variant","Alert","severity","noValidate","onSubmit","TextField","margin","required","fullWidth","id","autoFocus","size","onChange","type","autoComplete","Grid","container","spacing","justify","xs","sm","Button","color","onClick","Component","userMsg","hideMsg","hideMsgSuccess","Register","backToLogin","AuthRoute","getItem","to","ItemList","ind","key","md","lg","xl","Paper","src","image","alt","createdDate","createdYear","Date","getFullYear","getCreatedYear","created","location","Search","searchByName","InputProps","endAdornment","InputAdornment","IconButton","handleSearch","Sorting","FormControl","InputLabel","Select","labelId","event","handleSorting","sortingValue","MenuItem","Logout","clear","handleLogout","logout","Header","Checkbox","handleFilter","option","Filter","heading","i","filterClick","Accordion","handleAccordion","filtered","filterName","filteredOption","checked","splice","indexOf","constants","accordionClass","activeClass","all_character","React","Home","getAllCharacter","searchName","filters","dataList","sortOption","getFilteredData","searchText","filteredDataList","addedFilterOption","options","updateSorting","App","path","exact","Boolean","window","hostname","match","ReactDOM","render","Fragment","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message","module","exports"],"mappings":"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","file":"static/js/main.74373045.chunk.js","sourcesContent":["export const baseUrl = 'http://localhost:4000';\r\n\r\n// Error Msg\r\nexport const duplicateUser = 'Duplicate Username';\r\n\r\n// App Heading\r\nexport const APP_HEADING = \"Rick and Morty Show\";\r\n\r\n// Heading and Labels\r\nexport const SORT_BY_ID = 'Sort by ID';\r\nexport const ASCENDING_OPTION = \"Ascending\";\r\nexport const DESCENDING_OPTION = \"Descending\";\r\nexport const SPECIES_FILTER_HEADING = \"Species Filter:\";\r\nexport const GENDER_FILTER_HEADING = \"Gender Filter:\";\r\nexport const ORIGIN_FILTER_HEADING = \"Origin Filter:\";\r\n\r\n// filtered action text\r\nexport const FILTERED_SOMETHING = \"WANT TO FILTERED?\";\r\nexport const ASCENDING = 'asc';\r\n\r\n// labels name\r\nexport const STATUS_LIST = 'STATUS';\r\nexport const SPECIES_LIST = 'SPECIES';\r\nexport const ORIGIN_LIST = 'ORIGIN';\r\nexport const LOCATION_LIST = 'LOCATION';\r\nexport const GENDER_LIST = 'GENDER';\r\n\r\n// Error\r\nexport const NETWORK_ERROR = 'Network Error';\r\n\r\n\r\n\r\n// Filter Names\r\nexport const SPECIES = \"species\";\r\nexport const GENDER = \"gender\";\r\nexport const ORIGIN = \"origin\";\r\nexport const NAME = \"name\";\r\n\r\n// Filter Options Obj\r\nexport const FILTERED_OPTIONS = {\r\n    species:[],\r\n    gender:[],\r\n    origin:[]\r\n}","import axios from 'axios';\r\nimport * as constant from '../constants';\r\n\r\nexport const baseService = {\r\n    get,\r\n    post\r\n};\r\n\r\n// get call\r\nfunction get(_url){\r\n    const url = constant.baseUrl + _url;\r\n    return axios.get(url).then(response => Promise.resolve(response)).catch(err => Promise.reject(err));\r\n}\r\n\r\n// post call\r\nfunction post(_url,body){\r\n    const url = constant.baseUrl + _url;\r\n    return axios.post(url,body).then(response => Promise.resolve(response)).catch(err => Promise.reject(err));\r\n}\r\n","/**\r\n * Description: Created Count of Year\r\n * @method getCreatedYear\r\n * @param {String} createdDate \r\n * @returns {String}  \r\n */\r\nexport const getCreatedYear = (createdDate) => {\r\n    const createdYear = new Date(createdDate).getFullYear();\r\n    const presentYear = new Date().getFullYear();\r\n    return presentYear - createdYear;\r\n};\r\n\r\n/**\r\n * Description: Get Checkbox data\r\n * @method getCheckboxData\r\n * @param {Array} data\r\n * @param {String} label\r\n * @param {Boolean} origin \r\n * @returns {Array}\r\n */\r\nexport const getCheckboxData = (data, label, origin = false) => {\r\n    let result = [];\r\n    data.map(item => {\r\n        return result.push(origin ? item[label].name : item[label])\r\n    })\r\n    return [...new Set(result)];\r\n}\r\n\r\n/**\r\n * Description: Set data in localStorage\r\n * @method setLocalstorage\r\n * @param {Object} data \r\n */\r\nexport const setLocalstorage = (data) => {\r\n    if (data) {\r\n        for (let value in data) {\r\n            localStorage.setItem(value, data[value]);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Description: Remove data from localStorage\r\n * @method removeFromLocalStorage\r\n * @param {Object} data \r\n */\r\nexport const removeFromLocalStorage = (data) => {\r\n    if (data) {\r\n        data.forEach(item => {\r\n            localStorage.removeItem(item);\r\n        })\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\nimport { baseService } from '../../../service/apiService';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport * as utils from '../../../utils';\r\nimport * as constants from '../../../constants';\r\n\r\nimport './Login.scss';\r\n\r\n/**\r\n * Define constant Object for Login for initial state\r\n */\r\nconst initialState = {\r\n    userName: \"\",\r\n    password: \"\",\r\n    submitted: false,\r\n    serverError: \"\"\r\n}\r\n\r\nclass Login extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { ...initialState }\r\n    }\r\n\r\n    /**\r\n     * Description: handleChange will call when user change any text in input control\r\n     * @method handleChange\r\n     * @param  {event} e\r\n     */\r\n    handleChange = (e) => {\r\n        let { name, value } = e.target;\r\n        value = value.trim();\r\n        this.setState({\r\n            [name]: value\r\n        }, () => {\r\n            if (this.state.serverError) {\r\n                this.setState({\r\n                    serverError: \"\"\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Description: Go to the Register page\r\n     * @method registerNewUser\r\n     * @param {null}  \r\n     */\r\n    registerNewUser = () => {\r\n        this.props.history.push('/register');\r\n    }\r\n\r\n    /**\r\n     * Description: Submit the data when user click on submit button\r\n     * @method handleSubmit\r\n     * @param  {event} e\r\n     */\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.setState({\r\n            submitted: true\r\n        });\r\n        const { userName, password } = this.state;\r\n        const data = {\r\n            username: userName,\r\n            password: password\r\n        }\r\n        if (userName && password) {\r\n            baseService.post('/login', data).then(response => {\r\n                console.log('response')\r\n                if(response.status === 200){\r\n                    const userData = {\r\n                        name:response.data.name,\r\n                        loginId:response.data._id,\r\n                        userId:response.data.username,\r\n                        sorting:response.data.sorting\r\n                    }\r\n                    utils.setLocalstorage(userData);\r\n                    this.props.history.push('/home');\r\n                }\r\n            }\r\n            ).catch(error => {\r\n                try {\r\n                    if(error){\r\n                        this.setState({\r\n                            serverError: constants.NETWORK_ERROR\r\n                        })\r\n                    }\r\n                    if (error.response.status === 401) {\r\n                        this.setState({\r\n                            serverError: error.response.data.error\r\n                        })\r\n                    }\r\n                } catch (error) {\r\n                    console.log(error)\r\n                }                \r\n                \r\n            })\r\n        }\r\n\r\n    }\r\n    \r\n    render() {\r\n        const { userName, password, submitted, serverError } = this.state;\r\n        return (\r\n            <Container component=\"main\" maxWidth=\"xs\">\r\n                <div className=\"wrapper\">\r\n                    <Typography component=\"h1\" variant=\"h5\">Sign in</Typography>\r\n                    {serverError && <Alert variant=\"outlined\" severity=\"error\">{serverError}</Alert>}\r\n                    <form noValidate onSubmit={this.handleSubmit}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            id=\"userName\"\r\n                            label=\"Username\"\r\n                            name=\"userName\"\r\n                            autoFocus\r\n                            size=\"small\"\r\n                            value={userName}\r\n                            onChange={this.handleChange}\r\n                            error={!userName && submitted}\r\n                        />\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            name=\"password\"\r\n                            label=\"Password\"\r\n                            type=\"password\"\r\n                            id=\"password\"\r\n                            value={password}\r\n                            autoComplete=\"current-password\"\r\n                            size=\"small\"\r\n                            onChange={this.handleChange}\r\n                            error={!password && submitted}\r\n                        />\r\n                        <Grid container spacing={2} justify=\"center\">\r\n                            <Grid item xs={12} sm={6} >\r\n                                <Button fullWidth type=\"submit\" variant=\"contained\" size=\"large\" color=\"primary\">\r\n                                    Sign In\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item xs={12} sm={6}>\r\n                                <Button fullWidth variant=\"outlined\" onClick={this.registerNewUser} size=\"large\" color=\"primary\">\r\n                                    Register\r\n                                </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </form>\r\n                </div>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Login;","import React, { Component } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\nimport { baseService } from '../../../service/apiService';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport * as constants from '../../../constants';\r\n\r\nimport './Register.scss';\r\n\r\n/**\r\n * Define constant Object for Register for initial state\r\n */\r\nconst initialState = {\r\n    name: \"\",\r\n    userName: \"\",\r\n    password: \"\",\r\n    submitted: false,\r\n    serverError: \"\",\r\n    userMsg: \"\",\r\n    hideMsg: false,\r\n    hideMsgSuccess:false\r\n}\r\n\r\nclass Register extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { ...initialState }\r\n    }\r\n\r\n    /**\r\n     * Description: handleChange will call when user change any text in input control\r\n     * @method handleChange\r\n     * @param  {event} e\r\n     * @return {null}\r\n     */\r\n    handleChange = (e) => {\r\n        let { name, value } = e.target;\r\n        this.setState({\r\n            [name]: value\r\n        }, () => {\r\n            if (this.state.hideMsg) {\r\n                this.setState({\r\n                    hideMsg: false\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Description: Back to Login page\r\n     * @method backToLogin\r\n     * @param  {null}\r\n     */\r\n    backToLogin = () => {\r\n        this.props.history.push('/');\r\n    }\r\n\r\n    /**\r\n     * Description: Submit the data when user click on submit button\r\n     * @method handleSubmit\r\n     * @param  {event} e\r\n     */\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.setState({\r\n            submitted: true\r\n        });\r\n        const { name, userName, password } = this.state;\r\n        const data = {\r\n            name: name,\r\n            username: userName,\r\n            password: password\r\n        }\r\n        if (name && userName && password) {\r\n            baseService.post('/register', data).then(response => {\r\n                if (response.status === 200) {\r\n                    this.setState({\r\n                        userMsg: \"User Created Successfully\",\r\n                        name: \"\",\r\n                        userName: \"\",\r\n                        password: \"\",\r\n                        submitted: false,\r\n                        hideMsgSuccess: true,\r\n                        hideMsg:false\r\n                    })\r\n                }\r\n            }).catch(error => {\r\n                try {\r\n                    if(error){\r\n                        this.setState({\r\n                            serverError: constants.NETWORK_ERROR\r\n                        })\r\n                    }\r\n                    if (error.response.status === 401) {\r\n                        this.setState({\r\n                            serverError: constants.duplicateUser,\r\n                            hideMsg: true,\r\n                            hideMsgSuccess:false\r\n                        })\r\n                    }\r\n                } catch (error) {\r\n                    console.log(error)\r\n                }\r\n            })\r\n        }\r\n\r\n    }\r\n    render() {\r\n        const { name, userName, password, submitted, serverError, userMsg, hideMsg, hideMsgSuccess } = this.state;\r\n        return (\r\n            <Container component=\"main\" maxWidth=\"xs\">\r\n                <div className=\"login-wrapper\">\r\n                    <Typography component=\"h1\" variant=\"h5\">\r\n                        User Register\r\n                </Typography>\r\n                    {serverError && hideMsg && <Alert variant=\"outlined\" severity=\"error\">{serverError}</Alert>}\r\n                    {userMsg && hideMsgSuccess && <Alert variant=\"outlined\" severity=\"success\">{userMsg}</Alert>}\r\n                    <form noValidate onSubmit={this.handleSubmit}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            id=\"name\"\r\n                            label=\"name\"\r\n                            name=\"name\"\r\n                            autoFocus\r\n                            size=\"small\"\r\n                            value={name}\r\n                            onChange={this.handleChange}\r\n                            error={!name && submitted}\r\n                        />\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            id=\"userName\"\r\n                            label=\"Username\"\r\n                            name=\"userName\"\r\n                            size=\"small\"\r\n                            value={userName}\r\n                            onChange={this.handleChange}\r\n                            error={!userName && submitted}\r\n                        />\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            name=\"password\"\r\n                            label=\"Password\"\r\n                            type=\"password\"\r\n                            id=\"password\"\r\n                            value={password}\r\n                            size=\"small\"\r\n                            onChange={this.handleChange}\r\n                            error={!password && submitted}\r\n                        />\r\n                        <Grid container spacing={2} justify=\"center\">\r\n                            <Grid item xs={12} sm={6} >\r\n                                <Button fullWidth type=\"submit\" variant=\"contained\" size=\"large\" color=\"primary\">\r\n                                    Register\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item xs={12} sm={6}>\r\n                                <Button fullWidth variant=\"outlined\" onClick={this.backToLogin} size=\"large\" color=\"primary\">\r\n                                    Back to Login\r\n                                </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </form>\r\n                </div>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Register;","import React from \"react\";\r\nimport {\r\n  Route,\r\n  Redirect\r\n} from \"react-router-dom\";\r\n\r\nconst AuthRoute = (props) => {\r\n  const isAlreadySignin = localStorage.getItem('userId');\r\n\r\n  return isAlreadySignin ? <Route {...props} /> : <Redirect to=\"/\" />;\r\n};\r\n\r\nexport default AuthRoute;","import React from 'react';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport './ItemList.scss';\r\nimport * as constants from '../../../constants';\r\nimport { getCreatedYear } from \"../../../utils/\";\r\n\r\nexport const ItemList = (props) => {\r\n    return (\r\n        <Grid container spacing={0}>\r\n            {\r\n                props.data && props.data.map((item, ind) => {\r\n                    return (\r\n                        <Grid className=\"item-container\" item key={ind} xs={6} sm={4} md={3} lg={3} xl={2}>\r\n                            <Paper className=\"item\" >\r\n                                <img src={item.image} alt=\"\" />\r\n                                <div className=\"name-container\">\r\n                                    <h3>{item.name}</h3>\r\n                                    <div className=\"id\">{`Id: ${item.id} - created ${getCreatedYear(item.created)} years ago`}</div>\r\n                                </div>\r\n                                <ul className=\"bottom-container\">\r\n                                    <li><label>{constants.STATUS_LIST}</label> <span>{item.status}</span></li>\r\n                                    <li><label>{constants.SPECIES_LIST}</label> <span>{item.species}</span></li>\r\n                                    <li><label>{constants.GENDER_LIST}</label> <span>{item.gender}</span></li>\r\n                                    <li><label>{constants.ORIGIN_LIST}</label> <span>{item.origin.name}</span></li>\r\n                                    <li><label>{constants.LOCATION_LIST}</label> <span>{item.location.name}</span></li>\r\n                                </ul>\r\n                            </Paper>\r\n                        </Grid>\r\n                    )\r\n                })\r\n            }\r\n        </Grid>\r\n    )\r\n}","import React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport './Search.scss';\r\n\r\nexport const Search = (props) => {\r\n    return (<>\r\n        <TextField\r\n            onChange={props.searchByName}\r\n            label=\"Search by Name\"\r\n            type=\"search\"\r\n            size=\"small\"\r\n            variant=\"outlined\"\r\n            InputProps={{\r\n                endAdornment: (\r\n                    <InputAdornment>\r\n                        <IconButton onClick={props.handleSearch}>\r\n                            <SearchIcon />\r\n                        </IconButton>\r\n                    </InputAdornment>\r\n                )\r\n            }}\r\n        />\r\n    </>)\r\n}","import React from 'react';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport * as constants from '../../../constants';\r\nimport './Sorting.scss';\r\n\r\nexport const Sorting = (props) => {\r\n    const handleSorting = (event) => {\r\n        props.handleSorting(event.target.value);\r\n    };\r\n    return (\r\n        <>       \r\n            <FormControl variant=\"outlined\" size=\"small\" className='formControl'>\r\n                <InputLabel id=\"demo-simple-select-outlined-label\">{constants.SORT_BY_ID}</InputLabel>\r\n                <Select\r\n                    labelId=\"demo-simple-select-outlined-label\"\r\n                    id=\"demo-simple-select-outlined\"\r\n                    onChange={handleSorting}\r\n                    label=\"sortingbyid\"\r\n                    value={props.sortingValue}\r\n                    >\r\n                    <MenuItem value={'asc'}>{constants.ASCENDING_OPTION}</MenuItem>\r\n                    <MenuItem value={'dsc'}>{constants.DESCENDING_OPTION}</MenuItem>\r\n                </Select>\r\n            </FormControl>\r\n        </>\r\n    )\r\n}","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport logout from '../../../assets/images/logout.svg';\r\nimport './Logout.scss';\r\n\r\nexport const Logout = (props) =>{\r\n    const logOut = () => {\r\n        localStorage.clear();\r\n        props.handleLogout();\r\n    }\r\n\r\n    return <Button id=\"logout\" size=\"large\" onClick={logOut} color=\"primary\"><img src={logout} alt=\"logout\" /></Button>\r\n}","import React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { Search } from '../Search';\r\nimport { Sorting } from '../Sorting';\r\nimport { Logout } from '../Logout';\r\nimport * as constants from '../../../constants';\r\nimport './Header.scss';\r\n\r\n\r\nexport const Header = (props) => {\r\n    const getUser = () => {\r\n        return localStorage.getItem('name');\r\n    }\r\n    return (\r\n        <header>\r\n            <Grid container spacing={3}>\r\n                <Grid item xs={12} sm={12} md={4} className=\"logo-heading\">\r\n                    <h1>{constants.APP_HEADING}</h1>\r\n                    <span className=\"username\">Welcome <span>{getUser()}</span></span>\r\n                </Grid>\r\n                <Grid item xs={12} sm={12} md={4} className=\"search\">\r\n                    <Search searchByName={props.searchByName} handleSearch={props.handleSearch} />\r\n                </Grid>\r\n                <Grid item xs={12} sm={12} md={4} className=\"select\">\r\n                    <Sorting handleSorting={props.handleSorting} sortingValue={props.sortingValue} />\r\n                    <Logout handleLogout={props.handleLogout} />\r\n                </Grid>\r\n            </Grid>\r\n        </header>\r\n    )\r\n}","import React from 'react';\r\n\r\nexport const Checkbox = props =>{\r\n    return <label ><input type=\"checkbox\" id={props.item} onClick={(e)=>props.handleFilter(e, props.option)} /> {props.item} </label>\r\n}","import React from 'react';\r\nimport { Checkbox } from '../Checkbox';\r\nimport './Filter.scss';\r\n\r\nexport const Filter = (props) => {\r\n    return (\r\n        <div className=\"box\">\r\n            <h4>{props.heading}</h4>\r\n            {\r\n                props.data && props.data.map((item, i) => {\r\n                    return <Checkbox key={i} handleFilter={props.filterClick} option={props.option} item={item} />\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport * as constants from '../../../constants';\r\nimport { getCheckboxData } from '../../../utils';\r\nimport { Filter } from '../../presentation/Filter';\r\nimport './Accordion.scss';\r\n\r\nclass Accordion extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            filtered: true,\r\n            filteredOption: constants.FILTERED_OPTIONS\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        this.setState({\r\n            filteredOption: {\r\n                species: [],\r\n                gender: [],\r\n                origin: []\r\n            }\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Description: Set Accordion open/close true/false\r\n     * @method handleAccordion\r\n     * @param {null}\r\n     */\r\n    handleAccordion = () => {\r\n        this.setState({\r\n            filtered: !this.state.filtered\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Description: Added filter on click\r\n     * @method filterClick\r\n     * @param {Event} e\r\n     * @param {String} option\r\n     */\r\n    filterClick = (e, option) => {\r\n        const filterName = (e.target.id);\r\n        let data = { ...this.state.filteredOption };\r\n        if (e.target.checked) {\r\n            data[option].push(filterName)\r\n        } else {\r\n            data[option].splice(data[option].indexOf(filterName), 1)\r\n        }\r\n        this.setState({\r\n            ...this.state,\r\n            filteredOption: data\r\n        }, () => {\r\n            this.props.filteredOption(this.state.filteredOption);\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const accordionClass = this.state.filtered ? \"right\" : \"down\";\r\n        const activeClass = !this.state.filtered ? \"active\" : \"\";\r\n        const all_character = this.props.data;\r\n        const species = getCheckboxData(all_character, constants.SPECIES);\r\n        const gender = getCheckboxData(all_character, constants.GENDER);\r\n        const origin = getCheckboxData(all_character, constants.ORIGIN, true);\r\n        return (\r\n            <Grid container className=\"accordion\">\r\n                <Grid item >\r\n                    <div className=\"accordion-title\" onClick={this.handleAccordion}>{constants.FILTERED_SOMETHING} <span className={`arrow ${accordionClass}`}></span></div>\r\n                    <div className={`filter-container ${activeClass}`}>\r\n                        <Filter\r\n                            heading={constants.SPECIES_FILTER_HEADING}\r\n                            data={species}\r\n                            filterClick={this.filterClick}\r\n                            option={constants.SPECIES}\r\n                        />\r\n                        <Filter\r\n                            heading={constants.GENDER_FILTER_HEADING}\r\n                            data={gender}\r\n                            filterClick={this.filterClick}\r\n                            option={constants.GENDER}\r\n                        />\r\n                        <Filter\r\n                            heading={constants.ORIGIN_FILTER_HEADING}\r\n                            data={origin}\r\n                            filterClick={this.filterClick}\r\n                            option={constants.ORIGIN}\r\n                        />\r\n                    </div>\r\n                </Grid>\r\n            </Grid>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Accordion;\r\n","import React, { Component } from \"react\";\r\nimport { ItemList } from '../../presentation/ItemList/ItemList';\r\nimport { Header } from '../../presentation/Header';\r\nimport Accordion from '../Accordion/Accordion';\r\nimport { baseService } from '../../../service/apiService';\r\nimport * as constants from '../../../constants';\r\nimport * as utils from '../../../utils';\r\n\r\nclass Home extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            dataList: [],\r\n            filteredOption: constants.FILTERED_OPTIONS,\r\n            searchText: '',\r\n            sortOption: ''\r\n        }\r\n    };\r\n\r\n    componentDidMount() {        \r\n        const sorting = localStorage.getItem('sorting');\r\n        this.getAllCharacter(sorting)\r\n    };\r\n\r\n    /**\r\n     * Description: Get Data from character API\r\n     * @method getAllCharacter\r\n     * @param {null} \r\n     */\r\n    getAllCharacter = (sorting) => {\r\n        const data = {\r\n            sorting: sorting,\r\n            searchName: '',\r\n            filters: {\r\n                species: [],\r\n                gender: [],\r\n                origin: []\r\n            }\r\n        };\r\n        baseService.post('/filters', data).then(response => {\r\n            if (response.status === 200) {\r\n                this.setState({\r\n                    dataList: response.data,\r\n                    sortOption: sorting\r\n                })\r\n            }\r\n        }).catch(error => {\r\n            console.log(error)\r\n        })\r\n    };\r\n\r\n    /**\r\n     * Description: Get Filter Data API call\r\n     * @method getFilteredData\r\n     * @param {null} \r\n     */\r\n    getFilteredData = () => {\r\n        const { searchText, sortOption, filteredOption } = this.state;\r\n        const data = {\r\n            sorting: sortOption,\r\n            searchName: searchText,\r\n            filters: {\r\n                species: filteredOption.species,\r\n                gender: filteredOption.gender,\r\n                origin: filteredOption.origin\r\n            }\r\n        };\r\n        utils.setLocalstorage({ sorting: sortOption });\r\n        baseService.post('/filters', data).then(response => {\r\n            this.setState({ filteredDataList: response.data })\r\n        }).catch(error => {\r\n            try {\r\n                if (error) {\r\n                    console.log(constants.NETWORK_ERROR)\r\n                }\r\n            } catch (error) {\r\n                console.log(error)\r\n            }\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Description: Filter Option update in State\r\n     * @method addedFilterOption\r\n     * @param {Object} options \r\n     */\r\n    addedFilterOption = (options) => {\r\n        this.setState({\r\n            filteredOption: options\r\n        }, () => {\r\n            this.getFilteredData();\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Description: Search By name text update in State\r\n     * @method searchByName\r\n     * @param {Object} options \r\n     */\r\n    searchByName = (e) => {\r\n        const searchText = e.target.value.trim();\r\n        this.setState({\r\n            searchText: searchText\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Description: Get data filtere with search name\r\n     * @method handleSearch\r\n     * @param {null}  \r\n     */\r\n    handleSearch = () => {\r\n        this.getFilteredData();\r\n    }\r\n\r\n    /**\r\n     * Description: Sorting order update in State\r\n     * @method handleSorting\r\n     * @param {String} sortOption \r\n     */\r\n    handleSorting = (sortOption) => {\r\n        this.setState({\r\n            sortOption: sortOption\r\n        }, () => {\r\n            this.getFilteredData();\r\n            this.updateSorting();\r\n        });\r\n\r\n    }\r\n\r\n    updateSorting = () => {\r\n        const username = localStorage.getItem('userId');\r\n        const data = {\r\n            username: username,\r\n            sorting: this.state.sortOption\r\n        }\r\n        baseService.post('/updatesort', data).then(response => {\r\n            if (response.status === 200) {\r\n                console.log('sorting data updated')\r\n            }\r\n        }).catch(error => {\r\n            console.log(error)\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Description: Redirect to the Login page\r\n     * @method handleLogout\r\n     * @param {null} \r\n     */\r\n    handleLogout = () => {\r\n        this.props.history.push('/');\r\n    }\r\n\r\n    render() {\r\n        console.log(this.state)\r\n        return (\r\n            <>\r\n                <Header\r\n                    searchByName={this.searchByName}\r\n                    handleSorting={this.handleSorting}\r\n                    handleLogout={this.handleLogout}\r\n                    handleSearch={this.handleSearch}\r\n                    sortingValue={this.state.sortOption}\r\n                />\r\n                <Accordion data={this.state.dataList} filteredOption={this.addedFilterOption} />\r\n                <ItemList data={this.state.filteredDataList || this.state.dataList} />\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home;","import React, { Component } from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport Login from '../Login';\nimport Register from '../Register';\nimport AuthRoute from '../../presentation/AuthRoute/AuthRoute';\nimport Home from '../Home';\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <Switch>\n          <Route path=\"/\" exact component={Login} />\n          <Route path=\"/register\" exact component={Register} />\n          <AuthRoute path=\"/home\" exact component={Home} />\n        </Switch>\n      </Router>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/container/App';\nimport './assets/css/style.scss';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom'\n\nReactDOM.render(\n  <React.Fragment>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.Fragment>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logout.e75855a1.svg\";"],"sourceRoot":""}